name: Test and Build
# Runs on all pushes and PR's
on:
  push:
    branches:
      - "**"
  pull_request:
jobs:
  test:
    name: Run test suite
    runs-on: ubuntu-latest
    # Run our tests on the alpine container
    container: python:3.8.0-alpine
    defaults:
      run:
        working-directory: app
    env: 
      # Django specific environment
      SQL_ENGINE: django.db.backends.postgresql
      SQL_DATABASE: directory
      SQL_USER: developer
      SQL_PASSWORD: password
      SQL_HOST: postgres
      SQL_PORT: 5432
    # Separately, run a postgres container to test against
    services:
      postgres:
        image: postgres
        env: 
          # POSTGRES specific environment (must match Django SQL_* values above)
          POSTGRES_DB: directory
          POSTGRES_USER: developer
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
        # Pip and system dependencies needed inside the container
      - name: Install Dependencies
        run: |
          apk update
          apk add postgresql-dev gcc python3-dev musl-dev
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run database migrations
        run: python manage.py migrate
      - name: Django Tests 
        run: python manage.py test
  build:
    name: Build Docker Container
    id: build-image
    # Only build container when code has been merged into main
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: login
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish stable image
        uses: docker/build-push-action@v2
        env:
          IMAGE_TAG: ${{ github.sha }}
        with:
          context: app
          file: ./app/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/myfarm:$IMAGE_TAG

  deploy:
    name: Deploy to ECS
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1

      # - name: Build, tag, and push image to Amazon ECR
      #   id: build-image
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: my-ecr-repo
      #     IMAGE_TAG: ${{ github.sha }}
      #   run: |
      #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      #     echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition MyFarmTask --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: my-container
          image: ${{ steps.build-image.outputs.tags }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: MyFarmService
          cluster: MyFarmCluster
          wait-for-service-stability: true